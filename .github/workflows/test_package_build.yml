name: Build and Test Package

on: [push]

jobs:
    build-package:
        runs-on: ubuntu-latest
        steps:
              - name: Checkout code
                uses: actions/checkout@v3

              - name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: '3.9'

              - name: Install Poetry
                run: |
                    curl -sSL https://install.python-poetry.org | python3 -
                    echo "$HOME/.local/bin" >> $GITHUB_PATH

              - name: Remove previous builds
                run: |
                    cd $GITHUB_WORKSPACE
                    rm -f dist/metobs_toolkit-*
                    rm -rf *.egg-info

              - name: Install dependencies
                run: poetry install

              - name: Build the package
                run: poetry build

              - name: Debug dist contents
                run: |
                    cd $GITHUB_WORKSPACE
                    ls -l dist/

              - name: Upload package artifact
                uses: actions/upload-artifact@v4
                with:
                    name: regular_package
                    path: ./dist/metobs_toolkit-*.whl

    test-install:
        needs: build-package
        continue-on-error: true
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                python-version: [3.11]
        runs-on: ${{ matrix.os }}
        steps:
              - name: Download package artifact
                uses: actions/download-artifact@v4
                with:
                    name: regular_package

              - name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python-version }}

              - name: Find the package file
                id: find_package
                shell: bash
                run: |
                  PACKAGE_FILE=$(find ./ -name "metobs_toolkit-*.whl" | head -n 1)
                  echo "Found package file: $PACKAGE_FILE"
                  echo "package_file=$PACKAGE_FILE" >> $GITHUB_ENV

              - name: Install package with pip
                run: |
                    pip install "${{ env.package_file }}"

              - name: Run the trivial import test
                run: |
                    python -c "import metobs_toolkit; print('Import successful')"
    build-docs:
        needs: build-package
        runs-on: ubuntu-latest
        steps:
              - name: Checkout code
                uses: actions/checkout@v3

              - name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: '3.9'

              - name: Install Poetry
                run: |
                    curl -sSL https://install.python-poetry.org | python3 -
                    echo "$HOME/.local/bin" >> $GITHUB_PATH

              - name: Install Sphinx system-wide
                run: |
                  sudo apt-get -y install python3-sphinx

              - name: Install package with dev and documentation groups
                run: |
                  poetry install --with dev,documentation

              - name: Debug dist contents
                run: |
                  cd $GITHUB_WORKSPACE
                  ls -l

              - name: Build documentation
                run: |
                  cd docs
                  source build_doc

              - name: Upload documentation artifact
                uses: actions/upload-artifact@v4
                with:
                    name: documentation
                    path: ${GITHUB_WORKSPACE}/docs/_build/

    versiontest:
        name: check if version is valid
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v3
          - name: get_version
            id: 'version_info'
            run: |
              CURRENT_VERSION="$(grep -oP '__version__ = "\K\d+\.\d+\.\d+' metobs_toolkit/__init__.py)"
              echo "current version (init) = ${CURRENT_VERSION}"
              echo "::set-output name=current_version::$CURRENT_VERSION"
              PYPROJECT_VERSION="$(grep -oP 'version = "\K\d+\.\d+\.\d+' pyproject.toml)"
              echo "current version (pyproject) = ${PYPROJECT_VERSION}"
              echo "::set-output name=pyproject_version::$PYPROJECT_VERSION"
          - name: version-is-correct
            if: ${{ steps.version_info.outputs.current_version != steps.version_info.outputs.pyproject_version }}
            run: |
              echo "version tags are not aligned!"
              exit 1
