name: Main workflow


#The handling of the workflow trigger is done by the lauch job !!
on:
  push:

jobs:
    scan-pr-labels:
        runs-on: ubuntu-latest
        # Map a step output to a job output
        outputs:
            output1: ${{ steps.ispresent.outputs.labelispresent }}
        steps:
        - uses: 8BitJonny/gh-get-current-pr@3.0.0
          id: PR
          with:
            # Authetication token to access GitHub APIs. (Can be omitted by default.)
            github-token: ${{ github.token }}
            # Verbose setting SHA when using Pull_Request event trigger to fix #16. (For push even trigger this is not necessary.)
            sha: ${{ github.sha }}

        - id: ispresent
          env:
            prLabel: ${{ steps.PR.outputs.pr_labels }}
          run: |
              if [[ "$prLabel" == *"RUN TESTS"* ]]; then
                  echo "The label 'RUN TESTS' is present."
                  echo "labelispresent=1" >> "$GITHUB_OUTPUT"
              else
                  echo "The label 'RUN TESTS' is not present."
                  echo "labelispresent=0" >> "$GITHUB_OUTPUT"
              fi

    launch-pipeline:
        runs-on: ubuntu-latest
        needs: scan-pr-labels
        if :
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/develop' ||
            github.event_name == 'pull_request' ||
            github.event_name == 'workflow_dispatch' ||
            needs.scan-pr-labels.outputs.output1 == '1'
        env:
          OUTPUT1: ${{ needs.scan-pr-labels.outputs.output1 }}

        steps:
          - env:
              OUTPUT1: ${{needs.job1.outputs.output1}}
            run: echo "Conditions are met, proceeding with the workflow!"



    build-package:
      needs: launch-pipeline
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.9'

        - name: Install Poetry
          run: |
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH

        - name: Remove previous builds
          run: |
            cd $GITHUB_WORKSPACE
            rm -f dist/metobs_toolkit-*
            rm -rf *.egg-info

        - name: Install dependencies
          run: poetry install

        - name: Build the package
          run: poetry build

        - name: Debug dist contents
          run: |
            cd $GITHUB_WORKSPACE
            ls -l dist/

        - name: Upload package artifact
          uses: actions/upload-artifact@v4
          with:
            name: regular_package
            path: ./dist/metobs_toolkit-*.whl

    test-install:
        needs: build-package
        continue-on-error: true
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                python-version: [3.9, 3.12]
        runs-on: ${{ matrix.os }}
        steps:
              - name: Download package artifact
                uses: actions/download-artifact@v4
                with:
                    name: regular_package

              - name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python-version }}

              - name: Find the package file
                id: find_package
                shell: bash
                run: |
                  PACKAGE_FILE=$(find ./ -name "metobs_toolkit-*.whl" | head -n 1)
                  echo "Found package file: $PACKAGE_FILE"
                  echo "package_file=$PACKAGE_FILE" >> $GITHUB_ENV

              - name: Install package with pip
                run: |
                    pip install "${{ env.package_file }}"

              - name: Run the trivial import test
                run: |
                    python -c "import metobs_toolkit; print('Import successful')"

    build-examples:
      needs: build-package
      name: Run the examples and generate the notebook output
      runs-on: ubuntu-latest
      # Dynamically create a matrix of test files

      strategy:
        matrix:
          test_file:
            - docs/examples/introduction.ipynb
            - docs/notebook_references/log_example.ipynb


      continue-on-error: true
      steps:
        # Checkout the repository
        - name: Checkout code
          uses: actions/checkout@v3

        # Set up Python
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.12'

        # Install dependencies (only once, cached)
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install ipython jupyter  # Ensure jupyter is installed
            pip install -e .

        # Clear output from notebook test files
        - name: Clear notebook outputs
          run: |
            for notebook in ${{ matrix.test_file }}; do
              jupyter nbconvert --clear-output --inplace "$notebook"
            done

        # Run notebook test files
        - name: Run notebook tests
          run: |
            for notebook in ${{ matrix.test_file }}; do
              jupyter nbconvert --to notebook --execute --inplace "$notebook"
            done

        # Upload each test_file as an artifact
        - name: Upload test file artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.test_file }}
            path: ${{ matrix.test_file }}


    build-docs:
        needs: build-examples
        # needs: build-package
        runs-on: ubuntu-latest
        steps:
              - name: Checkout code
                uses: actions/checkout@v3

              - name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: '3.11'

              - name: Clear the examples
                run: |
                  cd $GITHUB_WORKSPACE
                  rm -rf docs/examples
                  mkdir -p docs/examples

              - name: Install Poetry
                run: |
                    curl -sSL https://install.python-poetry.org | python3 -
                    echo "$HOME/.local/bin" >> $GITHUB_PATH

              - name: install pandoc (system wide)
                run: |
                  sudo apt-get -y install pandoc

              - name: Install package with dev and documentation groups
                run: |
                  poetry install --with dev,documentation
                  poetry show

              - name: Debug dist contents
                run: |
                  cd $GITHUB_WORKSPACE
                  ls -l

              - name: Build documentation
                run: |
                  cd $GITHUB_WORKSPACE
                  cd docs

                  #clear previous builds
                  rm -rf _build
                  # Create _build directory if it does not exist
                  mkdir -p _build

                  #clear previous autodoc generated files
                  rm -rf reference/api
                  mkdir -p reference/api

                  cd $GITHUB_WORKSPACE
                  poetry run sphinx-build -a -E -v docs/ docs/_build/

                  ls -l
                  ls -l docs
                  ls -l docs/_build

              - name: Debug documentation build
                run: |
                  cd $GITHUB_WORKSPACE
                  ls -l docs/_build

              - name: Upload documentation artifact
                uses: actions/upload-artifact@v4
                with:
                    name: documentation
                    path: docs/_build

    versiontest:
        name: check if version is valid
        needs: launch-pipeline
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v3
          - name: get_version
            id: 'version_info'
            run: |
              CURRENT_VERSION="$(grep -oP '__version__ = "\K\d+\.\d+\.\d+' metobs_toolkit/__init__.py)"
              echo "current version (init) = ${CURRENT_VERSION}"
              echo "::set-output name=current_version::$CURRENT_VERSION"
              PYPROJECT_VERSION="$(grep -oP 'version = "\K\d+\.\d+\.\d+' pyproject.toml)"
              echo "current version (pyproject) = ${PYPROJECT_VERSION}"
              echo "::set-output name=pyproject_version::$PYPROJECT_VERSION"
          - name: version-is-correct
            if: ${{ steps.version_info.outputs.current_version != steps.version_info.outputs.pyproject_version }}
            run: |
              echo "version tags are not aligned!"
              exit 1

    pytest:
        name: Run Pytest framework
        needs: launch-pipeline
        runs-on: ubuntu-latest
        # Dynamically create a matrix of test files
        strategy:
          matrix:
            test_file:
            - toolkit_tests/test_qc.py
            - toolkit_tests/test_obstypes.py
            - toolkit_tests/test_gf.py
            - toolkit_tests/test_analysis.py
            - toolkit_tests/test_importing.py
            - toolkit_tests/test_plotting.py
            - toolkit_tests/test_gee.py

        continue-on-error: true
        steps:
          # Checkout the repository
          - name: Checkout code
            uses: actions/checkout@v3

          # Set up Python
          - name: Set up Python
            uses: actions/setup-python@v4
            with:
              python-version: '3.12'

          # Install dependencies (only once, cached)
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              pip install ipython
              pip install -e .
              pip install pytest
              pip install pytest-mpl

          # List installed packages
          - name: List installed packages
            run: |
              pip list

          - name: Get test basename
            id: get_test_basename
            run: |
              TEST_FILE_NAME=$(basename "${{ matrix.test_file }}" .py)
              echo "test_basename=${TEST_FILE_NAME}" >> $GITHUB_ENV

          - name: Run Pytest --mpl to generate comparison figure
            continue-on-error: true #NO FAILURE --> so artifact step is executed
            env:
                GEE_SERVICE_ACCOUNT: ${{ secrets.GEE_SERVICE_ACCOUNT }}
            run: |
              if [ "${{ matrix.test_file }}" = "toolkit_tests/test_plotting.py" ]; then
                  mkdir -p tmp/${{ steps.get_test_basename.outputs.test_basename }}
                  pytest ${{ matrix.test_file }} --mpl --mpl-generate-summary=html --mpl-results-path=tmp/${{ steps.get_test_basename.outputs.test_basename }}
                else
                  echo "skip  ${{ matrix.test_file }}"
                fi

          - name: Upload mpl-diff artifact (only for test_plotting.py)
            if: ${{ matrix.test_file == 'toolkit_tests/test_plotting.py' }}
            uses: actions/upload-artifact@v4
            with:
              name: mpl-diff
              path: tmp


          - name: Run Pytest
            env:
              GEE_SERVICE_ACCOUNT: ${{ secrets.GEE_SERVICE_ACCOUNT }}
            run: |
              if [ "${{ matrix.test_file }}" = "toolkit_tests/test_plotting.py" ]; then
                mkdir -p tmp/${{ steps.get_test_basename.outputs.test_basename }}
                pytest ${{ matrix.test_file }} --mpl
              else
                pytest ${{ matrix.test_file }}
              fi
