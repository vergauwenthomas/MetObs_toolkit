#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May  8 15:55:13 2023

@author: thoverga
"""


import sys, os

from pathlib import Path
import pandas as pd

import metobs_toolkit

lib_folder = Path(__file__).resolve().parents[2]
# sys.path.append(str(lib_folder))
print(str(lib_folder))

#%%


dataset = metobs_toolkit.Dataset()

dataset = dataset.import_dataset(folder_path=os.path.join(str(lib_folder), "tests", "test_data"),
                                 filename='tests_dataset.pkl')



an = dataset.get_analysis()


# =============================================================================
# test diurnal methods
# =============================================================================

teststa =  ['vlinder01', 'vlinder02', 'vlinder03']

from datetime import datetime
startdt = datetime(2022,9,4)

# Test plotting and functions
(temp_diurnal, stats) = an.get_diurnal_statistics(colorby='lcz', stations=teststa, startdt=startdt, verbose=True)


test2 = an.get_diurnal_statistics_with_reference(refstation='vlinder08',colorby='name',
                                                  errorbands=True, verbose=True)

test3 = an.get_aggregated_diurnal_statistics(aggregation=['lcz'], verbose=True)


# Test values

temp_diurnal_test = {'vlinder01': {0: 15.539583333333333,
  1: 15.297222222222224,
  2: 15.162500000000001,
  3: 15.288888888888888,
  4: 15.211111111111112,
  5: 14.987499999999999,
  6: 15.601388888888888,
  7: 16.759027777777778,
  8: 17.994444444444444,
  9: 19.257638888888888,
  10: 20.078472222222224,
  11: 20.533333333333335,
  12: 20.994444444444444,
  13: 21.1875,
  14: 20.979166666666668,
  15: 20.907638888888886,
  16: 20.69027777777778,
  17: 20.085416666666667,
  18: 18.210416666666667,
  19: 17.056944444444444,
  20: 16.257638888888888,
  21: 15.902777777777779,
  22: 15.697222222222223,
  23: 15.400694444444444},
 'vlinder02': {0: 15.93263888888889,
  1: 15.755555555555556,
  2: 15.609027777777776,
  3: 15.561111111111112,
  4: 15.459027777777777,
  5: 15.40138888888889,
  6: 15.801388888888889,
  7: 16.86111111111111,
  8: 18.154861111111114,
  9: 19.593055555555555,
  10: 20.34722222222222,
  11: 20.802083333333332,
  12: 21.164583333333333,
  13: 21.25347222222222,
  14: 21.13888888888889,
  15: 21.240972222222222,
  16: 21.005555555555556,
  17: 20.25886524822695,
  18: 18.754166666666666,
  19: 17.726388888888888,
  20: 16.9625,
  21: 16.422916666666666,
  22: 16.007638888888888,
  23: 15.783333333333335},
 'vlinder03': {0: 15.56736111111111,
  1: 15.36597222222222,
  2: 15.127777777777778,
  3: 14.924305555555556,
  4: 14.757638888888888,
  5: 14.671527777777776,
  6: 14.888194444444444,
  7: 15.624305555555557,
  8: 16.813194444444445,
  9: 18.56875,
  10: 19.327777777777776,
  11: 19.849305555555556,
  12: 20.543055555555554,
  13: 21.415277777777778,
  14: 21.827777777777776,
  15: 21.695833333333333,
  16: 21.01388888888889,
  17: 20.239583333333332,
  18: 18.852777777777778,
  19: 17.96875,
  20: 17.115277777777777,
  21: 16.385416666666668,
  22: 15.85763888888889,
  23: 15.377083333333335}}

stats_test = {'mean': {('vlinder01', 0): 15.539583333333333,
  ('vlinder01', 1): 15.297222222222224,
  ('vlinder01', 2): 15.162500000000001,
  ('vlinder01', 3): 15.288888888888888,
  ('vlinder01', 4): 15.211111111111112,
  ('vlinder01', 5): 14.987499999999999,
  ('vlinder01', 6): 15.601388888888888,
  ('vlinder01', 7): 16.759027777777778,
  ('vlinder01', 8): 17.994444444444444,
  ('vlinder01', 9): 19.257638888888888,
  ('vlinder01', 10): 20.078472222222224,
  ('vlinder01', 11): 20.533333333333335,
  ('vlinder01', 12): 20.994444444444444,
  ('vlinder01', 13): 21.1875,
  ('vlinder01', 14): 20.979166666666668,
  ('vlinder01', 15): 20.907638888888886,
  ('vlinder01', 16): 20.69027777777778,
  ('vlinder01', 17): 20.085416666666667,
  ('vlinder01', 18): 18.210416666666667,
  ('vlinder01', 19): 17.056944444444444,
  ('vlinder01', 20): 16.257638888888888,
  ('vlinder01', 21): 15.902777777777779,
  ('vlinder01', 22): 15.697222222222223,
  ('vlinder01', 23): 15.400694444444444,
  ('vlinder02', 0): 15.93263888888889,
  ('vlinder02', 1): 15.755555555555556,
  ('vlinder02', 2): 15.609027777777776,
  ('vlinder02', 3): 15.561111111111112,
  ('vlinder02', 4): 15.459027777777777,
  ('vlinder02', 5): 15.40138888888889,
  ('vlinder02', 6): 15.801388888888889,
  ('vlinder02', 7): 16.86111111111111,
  ('vlinder02', 8): 18.154861111111114,
  ('vlinder02', 9): 19.593055555555555,
  ('vlinder02', 10): 20.34722222222222,
  ('vlinder02', 11): 20.802083333333332,
  ('vlinder02', 12): 21.164583333333333,
  ('vlinder02', 13): 21.25347222222222,
  ('vlinder02', 14): 21.13888888888889,
  ('vlinder02', 15): 21.240972222222222,
  ('vlinder02', 16): 21.005555555555556,
  ('vlinder02', 17): 20.25886524822695,
  ('vlinder02', 18): 18.754166666666666,
  ('vlinder02', 19): 17.726388888888888,
  ('vlinder02', 20): 16.9625,
  ('vlinder02', 21): 16.422916666666666,
  ('vlinder02', 22): 16.007638888888888,
  ('vlinder02', 23): 15.783333333333335,
  ('vlinder03', 0): 15.56736111111111,
  ('vlinder03', 1): 15.36597222222222,
  ('vlinder03', 2): 15.127777777777778,
  ('vlinder03', 3): 14.924305555555556,
  ('vlinder03', 4): 14.757638888888888,
  ('vlinder03', 5): 14.671527777777776,
  ('vlinder03', 6): 14.888194444444444,
  ('vlinder03', 7): 15.624305555555557,
  ('vlinder03', 8): 16.813194444444445,
  ('vlinder03', 9): 18.56875,
  ('vlinder03', 10): 19.327777777777776,
  ('vlinder03', 11): 19.849305555555556,
  ('vlinder03', 12): 20.543055555555554,
  ('vlinder03', 13): 21.415277777777778,
  ('vlinder03', 14): 21.827777777777776,
  ('vlinder03', 15): 21.695833333333333,
  ('vlinder03', 16): 21.01388888888889,
  ('vlinder03', 17): 20.239583333333332,
  ('vlinder03', 18): 18.852777777777778,
  ('vlinder03', 19): 17.96875,
  ('vlinder03', 20): 17.115277777777777,
  ('vlinder03', 21): 16.385416666666668,
  ('vlinder03', 22): 15.85763888888889,
  ('vlinder03', 23): 15.377083333333335},
 'std': {('vlinder01', 0): 1.9223098994830037,
  ('vlinder01', 1): 1.82004935168793,
  ('vlinder01', 2): 1.6601826085422933,
  ('vlinder01', 3): 1.5972052125711573,
  ('vlinder01', 4): 1.6838231187569224,
  ('vlinder01', 5): 1.825992401886779,
  ('vlinder01', 6): 1.7787787950034712,
  ('vlinder01', 7): 2.08109751822011,
  ('vlinder01', 8): 2.775234577819855,
  ('vlinder01', 9): 3.1501932421825307,
  ('vlinder01', 10): 3.367349670500352,
  ('vlinder01', 11): 3.7285329610931446,
  ('vlinder01', 12): 3.975902550088605,
  ('vlinder01', 13): 4.09037545082005,
  ('vlinder01', 14): 4.161577078010666,
  ('vlinder01', 15): 4.059041187914989,
  ('vlinder01', 16): 3.9494590130455207,
  ('vlinder01', 17): 3.7855442514545095,
  ('vlinder01', 18): 2.4973193670371883,
  ('vlinder01', 19): 1.5521991066941327,
  ('vlinder01', 20): 1.4872690447071821,
  ('vlinder01', 21): 1.6409934073174646,
  ('vlinder01', 22): 1.8636359846115584,
  ('vlinder01', 23): 1.9416486588398285,
  ('vlinder02', 0): 1.9953733149187047,
  ('vlinder02', 1): 1.8200045253835127,
  ('vlinder02', 2): 1.618032699732861,
  ('vlinder02', 3): 1.6059814379924746,
  ('vlinder02', 4): 1.7691771701451626,
  ('vlinder02', 5): 1.932243382978576,
  ('vlinder02', 6): 1.9609468995392825,
  ('vlinder02', 7): 2.206256555246463,
  ('vlinder02', 8): 2.9000320678504585,
  ('vlinder02', 9): 3.2014780847230466,
  ('vlinder02', 10): 3.4364753541038047,
  ('vlinder02', 11): 3.9562373299877747,
  ('vlinder02', 12): 4.17842391322391,
  ('vlinder02', 13): 4.276049958077927,
  ('vlinder02', 14): 4.246563581686049,
  ('vlinder02', 15): 4.117274086251836,
  ('vlinder02', 16): 4.084642528337644,
  ('vlinder02', 17): 3.90368088058265,
  ('vlinder02', 18): 2.8938535056025416,
  ('vlinder02', 19): 2.1448258152534843,
  ('vlinder02', 20): 1.774168770206158,
  ('vlinder02', 21): 1.9244005060517693,
  ('vlinder02', 22): 2.045088944707252,
  ('vlinder02', 23): 2.1184504166565183,
  ('vlinder03', 0): 1.7757823002208837,
  ('vlinder03', 1): 1.6574545820416016,
  ('vlinder03', 2): 1.5358396461881758,
  ('vlinder03', 3): 1.4856538447910221,
  ('vlinder03', 4): 1.4635229008369781,
  ('vlinder03', 5): 1.463383529996958,
  ('vlinder03', 6): 1.620303715282766,
  ('vlinder03', 7): 2.048716006822879,
  ('vlinder03', 8): 2.7821922866633253,
  ('vlinder03', 9): 3.7802665527433676,
  ('vlinder03', 10): 4.063231764230585,
  ('vlinder03', 11): 4.561207614107242,
  ('vlinder03', 12): 5.039406291728796,
  ('vlinder03', 13): 5.279255078894579,
  ('vlinder03', 14): 5.086475203147068,
  ('vlinder03', 15): 4.712754231609413,
  ('vlinder03', 16): 4.660031079927438,
  ('vlinder03', 17): 4.140930248347378,
  ('vlinder03', 18): 3.251442809258735,
  ('vlinder03', 19): 2.8911117408191114,
  ('vlinder03', 20): 2.591549458071096,
  ('vlinder03', 21): 2.351876761375757,
  ('vlinder03', 22): 2.175566154467177,
  ('vlinder03', 23): 1.856145293248981},
 'median': {('vlinder01', 0): 16.1,
  ('vlinder01', 1): 15.55,
  ('vlinder01', 2): 15.399999999999999,
  ('vlinder01', 3): 15.4,
  ('vlinder01', 4): 15.2,
  ('vlinder01', 5): 14.6,
  ('vlinder01', 6): 15.2,
  ('vlinder01', 7): 16.75,
  ('vlinder01', 8): 17.15,
  ('vlinder01', 9): 18.65,
  ('vlinder01', 10): 20.2,
  ('vlinder01', 11): 20.75,
  ('vlinder01', 12): 20.65,
  ('vlinder01', 13): 20.799999999999997,
  ('vlinder01', 14): 20.85,
  ('vlinder01', 15): 20.3,
  ('vlinder01', 16): 20.15,
  ('vlinder01', 17): 19.45,
  ('vlinder01', 18): 17.9,
  ('vlinder01', 19): 17.05,
  ('vlinder01', 20): 16.2,
  ('vlinder01', 21): 15.9,
  ('vlinder01', 22): 15.7,
  ('vlinder01', 23): 15.6,
  ('vlinder02', 0): 16.45,
  ('vlinder02', 1): 16.3,
  ('vlinder02', 2): 16.05,
  ('vlinder02', 3): 15.8,
  ('vlinder02', 4): 15.399999999999999,
  ('vlinder02', 5): 15.25,
  ('vlinder02', 6): 15.55,
  ('vlinder02', 7): 16.7,
  ('vlinder02', 8): 17.15,
  ('vlinder02', 9): 19.45,
  ('vlinder02', 10): 20.75,
  ('vlinder02', 11): 21.25,
  ('vlinder02', 12): 21.25,
  ('vlinder02', 13): 20.700000000000003,
  ('vlinder02', 14): 21.05,
  ('vlinder02', 15): 20.8,
  ('vlinder02', 16): 20.4,
  ('vlinder02', 17): 19.3,
  ('vlinder02', 18): 18.3,
  ('vlinder02', 19): 17.7,
  ('vlinder02', 20): 16.85,
  ('vlinder02', 21): 16.6,
  ('vlinder02', 22): 16.0,
  ('vlinder02', 23): 15.85,
  ('vlinder03', 0): 15.6,
  ('vlinder03', 1): 15.25,
  ('vlinder03', 2): 15.2,
  ('vlinder03', 3): 15.2,
  ('vlinder03', 4): 15.2,
  ('vlinder03', 5): 15.100000000000001,
  ('vlinder03', 6): 15.4,
  ('vlinder03', 7): 15.850000000000001,
  ('vlinder03', 8): 16.1,
  ('vlinder03', 9): 16.5,
  ('vlinder03', 10): 17.55,
  ('vlinder03', 11): 18.15,
  ('vlinder03', 12): 19.200000000000003,
  ('vlinder03', 13): 20.8,
  ('vlinder03', 14): 20.75,
  ('vlinder03', 15): 21.15,
  ('vlinder03', 16): 21.15,
  ('vlinder03', 17): 20.25,
  ('vlinder03', 18): 18.95,
  ('vlinder03', 19): 17.55,
  ('vlinder03', 20): 16.5,
  ('vlinder03', 21): 16.1,
  ('vlinder03', 22): 15.55,
  ('vlinder03', 23): 15.149999999999999}}

assert temp_diurnal.eq(pd.DataFrame(temp_diurnal_test)).all().all(), f'Maybe something wrong with the verbose output, since it is not equal to hardcoded df.'
assert stats.eq(pd.DataFrame(stats_test)).all().all(), f'Maybe something wrong with the verbose output, since it is not equal to hardcoded df.'


# =============================================================================
# Test represetation
# =============================================================================

print(an)

# =============================================================================
# Test filter method
# =============================================================================

filter_an = an.apply_filter('temp < 15.5 &  hour <= 19 & lcz == "Open midrise"')

assert filter_an.df.shape == (2481, 10), 'filter on analysis problem'

# =============================================================================
# aggregate method
# =============================================================================

agg_df = an.aggregate_df( agg=['lcz', 'hour'])
assert agg_df.shape == (216,10), 'aggregate on analysis problem'



# =============================================================================
# Correlation check
# =============================================================================
import numpy as np
an.get_lc_correlation_matrices(obstype=['temp', 'humidity'], groupby_labels=['lcz', 'season'])

# plot test
an.plot_correlation_heatmap(groupby_value=('Open lowrise', 'autumn'))

# value test

cor_vals = {'temp': {'temp': 1.0,
  'humidity': -0.8530694150916298,
  'water_100m': np.nan,
  'pervious_100m': -0.16467165943725465,
  'impervious_100m': 0.16467165943725534},
 'humidity': {'temp': -0.8530694150916298,
  'humidity': 1.0,
  'water_100m': np.nan,
  'pervious_100m': 0.20280562151890283,
  'impervious_100m': -0.2028056215189032},
 'water_100m': {'temp': np.nan,
  'humidity': np.nan,
  'water_100m': np.nan,
  'pervious_100m': np.nan,
  'impervious_100m': np.nan},
 'pervious_100m': {'temp': -0.16467165943725465,
  'humidity': 0.20280562151890283,
  'water_100m': np.nan,
  'pervious_100m': 1.0,
  'impervious_100m': -1.0},
 'impervious_100m': {'temp': 0.16467165943725534,
  'humidity': -0.2028056215189032,
  'water_100m': np.nan,
  'pervious_100m': -1.0,
  'impervious_100m': 1.0}}

assert an.lc_cor_dict[('Open lowrise', 'autumn')]['cor matrix'].fillna(0).eq(pd.DataFrame(cor_vals).fillna(0)).all().all(), 'Something wrong with the lc correlations matrices'




# scatter plot test

an.plot_correlation_variation()
