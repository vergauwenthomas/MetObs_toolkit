{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3b5f4587-e223-49aa-b4e8-8870c684d134",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "# Creating a new observation type"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b179e2ee-4cdb-4e7b-bc19-3f83b148b24a",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Observation types for Datasets\n",
    "The toolkit comes with a set of predefined observation types. Each observation type has a standard-toolkit-unit,\n",
    "this is the unit the toolkit will store and display the values.\n",
    "\n",
    "An overview can be found on [Mapping to the toolkit](./template_doc.html#Mapping to the toolkit) page.\n",
    "\n",
    "Each observation type is represented by an instance of the `metobs_toolkit.Obstype` class.\n",
    "\n",
    "As an example, here is the definition of the temperature observation type:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb6b20b8-c9f8-4b4d-8dcf-7e28964959b8",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Obstype instance of temp"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import metobs_toolkit\n",
    "\n",
    "temperature = metobs_toolkit.Obstype(\n",
    "                      obsname='temp', #The name of the observation type\n",
    "                      std_unit= 'Celsius', #The standard unit\n",
    "                      description=\"2m - temperature\", #A more detailed description (optional)\n",
    "                      unit_aliases={\n",
    "                         # Common units and a list of aliases for them.\n",
    "                          'Celsius': ['celsius', '째C', '째c', 'celcius', 'Celcius'],\n",
    "                          'Kelvin': ['K', 'kelvin'],\n",
    "                          'Farenheit': ['farenheit']},\n",
    "                         # Conversion schemes for common units to the standard unit.\n",
    "                      unit_conversions={\n",
    "                          'Kelvin': [\"x - 273.15\"], #result is in tlk_std_units (aka Celsius)\n",
    "                          'Farenheit' : [\"x-32.0\", \"x/1.8\"]}, # -->execute from left to write  = (x-32)/1.8},\n",
    "                      )\n",
    "\n",
    "temperature"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7189716-7560-42ec-b581-76a16015b008",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "You can use `Obstype.get_info()` to print out an overview of the observation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "814834f9-77bb-4dd4-b74a-42e5cc0a942c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <style>\n",
       "                .geemap-dark {\n",
       "                    --jp-widgets-color: white;\n",
       "                    --jp-widgets-label-color: white;\n",
       "                    --jp-ui-font-color1: white;\n",
       "                    --jp-layout-color2: #454545;\n",
       "                    background-color: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-dark .jupyter-button {\n",
       "                    --jp-layout-color3: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-colab {\n",
       "                    background-color: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "\n",
       "                .geemap-colab .jupyter-button {\n",
       "                    --jp-layout-color3: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "            </style>\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "temp observation with: \n",
      "     * standard unit: Celsius \n",
      "     * data column as None in None \n",
      "     * known units and aliases: {'Celsius': ['celsius', '째C', '째c', 'celcius', 'Celcius'], 'Kelvin': ['K', 'kelvin'], 'Farenheit': ['farenheit']} \n",
      "     * description: 2m - temperature \n",
      "     * conversions to known units: {'Kelvin': ['x - 273.15'], 'Farenheit': ['x-32.0', 'x/1.8']} \n",
      "     * originates from data column: None with None as native unit.\n"
     ]
    }
   ],
   "source": [
    "temperature.get_info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ec5361f-8644-408a-b211-6f1203e405bd",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "In the same manner, we can create a new observationtype by using the `Dataset.add_new_observationtype()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c6dee268-0f7b-49c3-b151-aad61582dd6c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <style>\n",
       "                .geemap-dark {\n",
       "                    --jp-widgets-color: white;\n",
       "                    --jp-widgets-label-color: white;\n",
       "                    --jp-ui-font-color1: white;\n",
       "                    --jp-layout-color2: #454545;\n",
       "                    background-color: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-dark .jupyter-button {\n",
       "                    --jp-layout-color3: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-colab {\n",
       "                    background-color: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "\n",
       "                .geemap-colab .jupyter-button {\n",
       "                    --jp-layout-color3: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "            </style>\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wind_u_comp observation with: \n",
      "     * standard unit: m/s \n",
      "     * data column as None in None \n",
      "     * known units and aliases: {'m/s': ['meter/s'], 'km/s': []} \n",
      "     * description: 2m - u component of the wind (5min averages) \n",
      "     * conversions to known units: {'km/s': ['x / 3.6']} \n",
      "     * originates from data column: None with None as native unit.\n"
     ]
    }
   ],
   "source": [
    "import metobs_toolkit\n",
    "\n",
    "#create an new observation type\n",
    "wind_component_east = metobs_toolkit.Obstype(obsname='wind_u_comp', #The name of the observation type\n",
    "    std_unit= 'm/s', #The standard unit\n",
    "    description=\"2m - u component of the wind (5min averages)\", #A more detailed description (optional)\n",
    "    unit_aliases={\n",
    "        # Common units and a list of aliases for them.\n",
    "        'm/s': ['meter/s']},\n",
    "    # Conversion schemes for common units to the standard unit.\n",
    "    unit_conversions={'km/s': [\"x / 3.6\"]} #result is in tlk_std_units (aka m/s)\n",
    ")\n",
    "\n",
    "wind_component_east.get_info()\n",
    "\n",
    "\n",
    "#add your observation type to a dataset\n",
    "your_dataset = metobs_toolkit.Dataset()\n",
    "your_dataset.add_new_observationtype(Obstype=wind_component_east)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79519495-e4d9-4162-8569-3d7e25ec0e17",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "If you want to add a new unit to an existing observation type you can do so by using the `Dataset.add_new_unit()` method."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21e49162-e51a-41dd-b48a-69c961ff42a7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Observation types for (ERA5) Modeldata\n",
    "\n",
    "Modeldata objects also holds a similar set of observation types. But in addition to the observation types stored in the Dataset, extra information is stored on where which (ERA5) band and unit the observation type represents. Here is an example on how to create a new observation type for a `Modeldata` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5742cee6-f0d9-4652-a094-ee809de75717",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <style>\n",
       "                .geemap-dark {\n",
       "                    --jp-widgets-color: white;\n",
       "                    --jp-widgets-label-color: white;\n",
       "                    --jp-ui-font-color1: white;\n",
       "                    --jp-layout-color2: #454545;\n",
       "                    background-color: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-dark .jupyter-button {\n",
       "                    --jp-layout-color3: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-colab {\n",
       "                    background-color: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "\n",
       "                .geemap-colab .jupyter-button {\n",
       "                    --jp-layout-color3: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "            </style>\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#create an new observationtype\n",
    "wind_component_east = metobs_toolkit.Obstype(\n",
    "                      obsname='wind_u_comp', #The name of the observation type\n",
    "                      std_unit= 'm/s', #The standard unit\n",
    "                      description=\"10m - east component of the wind \", #A more detailed description (optional)\n",
    "                      unit_aliases={\n",
    "                         # Common units and a list of aliases for them.\n",
    "                          'm/s': ['meter/s']},\n",
    "                         \n",
    "                      # Conversion schemes for common units to the standard unit.\n",
    "                      unit_conversions={'km/s': [\"x / 3.6\"]} #result is in tlk_std_units (aka m/s)\n",
    "                      )\n",
    "# create a modeldata instance\n",
    "model_data = metobs_toolkit.Modeldata(\"ERA5_hourly\")\n",
    "\n",
    "# add new obstype to model_data\n",
    "model_data.add_obstype(Obstype=wind_component_east,\n",
    "                       bandname='u_component_of_wind_10m', #See: https://developers.google.com/earth-engine/datasets/catalog/ECMWF_ERA5_LAND_HOURLY#bands\n",
    "                       band_units='m/s',\n",
    "                       )\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ae17e14-dd43-48f4-b2c4-c990de0795e7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Now you can extract the timeseries of the ERA5 u-component at the stations in your dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cb15893c-539e-4808-9148-ec33902c4a95",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <style>\n",
       "                .geemap-dark {\n",
       "                    --jp-widgets-color: white;\n",
       "                    --jp-widgets-label-color: white;\n",
       "                    --jp-ui-font-color1: white;\n",
       "                    --jp-layout-color2: #454545;\n",
       "                    background-color: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-dark .jupyter-button {\n",
       "                    --jp-layout-color3: #383838;\n",
       "                }\n",
       "\n",
       "                .geemap-colab {\n",
       "                    background-color: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "\n",
       "                .geemap-colab .jupyter-button {\n",
       "                    --jp-layout-color3: var(--colab-primary-surface-color, white);\n",
       "                }\n",
       "            </style>\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(When using the .set_model_from_csv() method, make sure the modelname of your Modeldata is ERA5_hourly)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Modeldata instance containing: \n",
       "     * Modelname: ERA5_hourly \n",
       "     * 28 timeseries \n",
       "     * The following obstypes are available: ['wind_u_comp'] \n",
       "     * Data has these units: ['m/s'] \n",
       "     * From 2022-09-03 12:00:00+00:00 --> 2022-09-04 12:00:00+00:00 (with tz=UTC) \n",
       " \n",
       " (Data is stored in the .df attribute)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime\n",
    "# Collect the U-wind component for your stations:\n",
    "your_dataset = metobs_toolkit.Dataset()\n",
    "your_dataset.import_data_from_file(input_data_file=metobs_toolkit.demo_datafile,\n",
    "                                   input_metadata_file=metobs_toolkit.demo_metadatafile,\n",
    "                                   template_file=metobs_toolkit.demo_template)\n",
    "\n",
    "\n",
    "model_data = your_dataset.get_modeldata(modeldata=model_data,\n",
    "                                        obstype = 'wind_u_comp',\n",
    "                                       startdt=datetime.datetime(2022,9,3,12),\n",
    "                                        enddt = datetime.datetime(2022,9,4,12)\n",
    "                                       )\n",
    "\n",
    "model_data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
